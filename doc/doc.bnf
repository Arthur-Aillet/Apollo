
<LetterMin>             = "a" | .. | "z";
<LetterMaj>             = "A" | .. | "Z";
<Letter>                = <LetterMin> | <LetterMaj>;
<Decimal>               = "0" | .. | "9";
<Hexadecimal>           = "0" | .. | "F";
<SpecialCharCall>       = "_" | "-";
<SpecialChars>          = "(" | ")" | "\\" | "/" | "[" |"]" | "\"" | "'" | <SpecialCharCall>;
<String>                = {(<Letter> | <SpecialCharCall>)}-;

<PosNumber>             = {<Decimal>}-;
<NegNumber>             = "-" <PosNumber>;
<PosFloat>              = <PosNumber> "." <PosNumber>;
<NegFloat>              = <NegNumber> "." <PosNumber>;

<HexaNumber>            = "0x"{<Hexadecimal>}-;
<Number>                = <PosNumber> | <NegNumber> | <HexaNumber>;
<Float>                 = <PosFloat> | <NegFloat>;
<StringType>            = "\"" {(<Letter> | <Decimal> | <specialChar>)} "\"";
<List>                  = "[" {{<Elem> ","} <Elem>} "]";
<Range>                 = <Number>".."<Number>[":"Number];
<Bool>                  = "true" | "false";
<Type>                  = "char" | "string" | "bool" | "int" | "float" | "[" <Type> "]";

<Iterable>              = <List> | <Range>;
<Elem>                  = <StringType> | <Number> | <Float> | <Bool> | <Call> | <Operation> | <List> | <Range>;

<EqualityPredicate>     = "<" | ">" | "==" | "!=" | "<=" | ">=";
<LogicalPredicate>      = "&&" | "||";
<BinaryPredicate>       = <LogicalPredicate> | <EqualityPredicate>
<CalculusPredicate>     = "/" | "%" | "-" | "+";
<UnaryPredicate>        = "!"
<Operation>             = ["("] <Elem> <BinaryPredicate> <Elem> [")"] | ["("] <UnaryPredicate> <Elem> [")"];

<DeclareVariable>       = <Type> <String>;
<DefineVariable>        = <DeclareVariable> "=" <Elem>;
<AssigneVariable>       = <String> "=" <Elem>;

<Parameters>            = [{<DeclareVariable> ","} <DeclareVariable>];

<FunctionDef>           = "@" <String> "(" <Parameters>")" [<Type>] "{" {<Instructions>} "}";


<StructureIf>           =   "if" "(" <Operation> ")" "{"
                                <Structure> "}"
                            { "elif" "(" <Operation> ")" "{" <Structure> }
                            [ "} else {" <Structure> "}" ];
<StructureWhile>        = "while" "(" <Operation> ")" "{" <Structure> "}";
<StructureFor>          = "for" <String> "in" <Iterable> "{" Structure> "}";
<StructureSequence>     = "{" {<Instruction> ";" } "}";

<Structure>             = <StructureIf> | <StructureFor> | <StructureFor> | <StructureSequence>;

<FuncArgs>              = [{<Elem> ","} <Elem>];
<FuncCall>              = "@"<String> ["(" <FuncArgs> ")" ];
<ShellCall>             = "$"<String> ["(" <FuncArgs> ")" ];
<Call>                  = (<FuncCall> | <ShellCall>) ";";

<Return>                = "return" ["("] <Elem> [")"];

<Action>                = (<Return> | <Call> | <Operation> | <DeclareVariable> | <DefineVariable> | <AssigneVariable>) ";";

<Instruction>           = <Structure> | <Action>;
<Instructions>          = {<Instruction>};
