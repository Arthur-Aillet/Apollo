
<LetterMin>             = "a" | .. | "z";
<LetterMaj>             = "A" | .. | "Z";
<Letter>                = <LetterMin> | <LetterMaj>;
<Decimal>               = "0" | .. | "9";
<Hexadecimal>           = "0" | .. | "F";
<SpecialCharCall>       = "_" | "-";
<SpecialChars>          = "(" | ")" | "\\" | "/" | "[" |"]" | "\"" | "'" | <SpecialCharCall>;
<String>                = {(<Letter> | <Decimal> | <SpecialCharCall>)}-;

<PosNumber>             = {<Decimal>}-;
<NegNumber>             = "-" <PosNumber>;
<PosFloat>              = <PosNumber> "." <PosNumber>;
<NegFloat>              = <NegNumber> "." <PosNumber>;

<HexaNumber>            = "0x"{<Hexadecimal>}-;
<Number>                = <PosNumber> | <NegNumber> | <HexaNumber>;
<Float>                 = <PosFloat> | <NegFloat>;
<StringType>            = "\"" {(<Letter> | <Decimal> | <specialChar>)} "\""; # \ handle
<List>                  = "[" {<Elem> ","} <Elem> "]";
<Range>                 = <Number>".."<Number>[":"Number]
<Bool>                  = "true" | "false";
<Type>                  = "char" | "string" | "bool" | "int" | "float" | "[" <Type> "]";

<Iterable>              = <List> | <Range>;
<Elem>                  = <StringType> | <Number> | <Float> | <Bool> | <Call> | <Operation> | <List> | <Range>;

<EqualityPredicate>     = "<" | ">" | "==" | "!=" | "<=" | ">=";
<LogicalPredicate>      = "&&" | "||";
<CalculusPredicate>     = "/" | "%" | "-" | "+";
<UnaryPredicate>        = "!"
<Operation>             = ["("] <Elem> <BinaryPredicate> <Elem> [")"] | ["("] <UnaryPredicate> <Elem> [")"]

<DeclareVariable>       = <Type> <String>;
<DefineVariable>        = <DeclareVariable> "=" <Elem>;
<AssigneVariable>       = <String> = <Elem>;

<Parameters>            = [<DeclareVariable>] | <DeclareVariable> {"," <DeclareVariable};

<StructureIf>           =   "if" <Operation> "{"
                                <Instructions> "}"
                            { "elif" <Operation> "{" <Instructions> "}" }
                            [ "elif {" <Instructions> "}" ];
<StructureWhile>        = "while" <Operation> "{" <Instructions> "}";
<StructureFor>          = "for" <String> "in" <Iterable> "{" <Instructions> "}"
<FunctionDef>           = "@" <String> "(" <Parameters> ")" <Type> "{" <Instructions> "}";

<FuncArgs>              = {<Elem> ","} <Elem>
<FuncCall>              = "@"<String> "(" <FuncArgs> ")";
<FuncCallWith0Args>     = "@"<String>;
<FuncCallWithPipedArg>  = "@"<String>;
<ShellCall>             = "$"<String> "(" <FuncArgs> ")";
<ShellCallWith0Args>    = "$"<String>;
<ShellCallWithPipedArg> = "$"<String>;
<Call>                  = <FuncCall> | <ShellCall>

<Return>                = "return" ["("] <Elem> [")"];
<ChainCalls>            = <Call>"."<Call>

# <Then>                  = <Call> ">>" <Call>;
#Â <Bind>                  = <DeclareVariable> "<-" <Call>;

<Instruction>           = <StructureIf> ";" | <Call> ";" | <Return> ";" | <SetVariable> ";" | <DeclareVariable> ";" | <AssigneVariable> ";";
<Instructions>          = {<Instruction>};
